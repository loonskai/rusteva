// ----------------------------------------
// Lexical grammar (tokens)
%lex

%%

\s+                /* skip whitespace */
\(                 return 'LPAREN'
\)                 return 'RPAREN'
\"[^\"]*\"         return 'STRING'
[\-]?\d+           return 'NUMBER'
'true'|'false'     return 'BOOLEAN'
'null'             return 'NULL'
'begin'            return 'BEGIN'
'var'              return 'VAR'
'if'               return 'IF'
'while'            return 'WHILE'
'='                return 'ASSIGN'
[+\-*/=<>]+        return 'OPERATOR'
[\w]+              return 'IDENTIFIER'

/lex

%{

type TResult = Expression;

%}

// Type declarations
%type<Value> Literal
%type<Expr> Expression SExpr
%type<Vec<Expr>> Expressions

// Syntactic grammar (BNF)

%%

Expression
    : Literal            { $$ = Expr::Literal($1) }
    | IDENTIFIER         { $$ = Expr::Identifier($1.to_string()) }
    | SExpr             { $$ = $1 }
    ;

Literal
    : NUMBER    { $$ = Value::Int($1.parse().unwrap()) }
    | STRING    { $$ = Value::Str($1.trim_matches('"').to_string()) }
    | BOOLEAN   { $$ = Value::Boolean($1 == "true") }
    | NULL      { $$ = Value::Null }
    ;

SExpr
    : LPAREN BEGIN Expressions RPAREN 
        { $$ = Expr::BlockStatement("begin".to_string(), $3) }
    | LPAREN VAR IDENTIFIER Expression RPAREN
        { $$ = Expr::VariableDeclaration("var".to_string(), $3, Box::new($4)) }
    | LPAREN OPERATOR Expression Expression RPAREN
        { $$ = Expr::BinaryExpression($2.to_string(), Box::new($3), Box::new($4)) }
    | LPAREN IF Expression Expression Expression RPAREN
        { $$ = Expr::IfExpression("if".to_string(), Box::new($3), Box::new($4), Box::new($5)) }
    | LPAREN WHILE Expression Expression RPAREN
        { $$ = Expr::WhileStatement("while".to_string(), Box::new($3), Box::new($4)) }
    | LPAREN IDENTIFIER ASSIGN Expression RPAREN
        { $$ = Expr::Assignment("assign".to_string(), $2, Box::new($4)) }
    ;

Expressions
    : Expressions Expression  { $1.push($2); $$ = $1 }
    | /* empty */            { $$ = Vec::new() }
    ;


