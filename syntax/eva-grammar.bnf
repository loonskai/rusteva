// ----------------------------------------
// Lexical grammar (tokens)

%lex

%%

\s+                /* skip whitespace */ return "";
\"[^\"]*\"         return "STRING"
[\-]?\d+           return "NUMBER"
[\w\-+*=<>/]+      return "SYMBOL"

/lex

// ----------------------------------------
// Syntactic grammar (BNF)

%{
use common::ParsedExpr;

type TResult = ParsedExpr;

%}

%%

Exp
  : Atom
  | List
  ;

Atom
  : NUMBER { 
    || -> ParsedExpr;
    $$ = ParsedExpr::Number(yytext.parse::<isize>().unwrap())
  }
  | STRING {
    || -> ParsedExpr;
    $$ = ParsedExpr::String(yytext.to_string())
  }
  | SYMBOL {
    || -> ParsedExpr;
    $$ = ParsedExpr::Symbol(yytext.to_string())
  }
  ;

List
  : '(' ListEntries ')' {
    $$ = $2
  }
  ;

ListEntries
  : ListEntries Exp {
    |$1: Vec<ParsedExpr>, $2: ParsedExpr| -> Vec<ParsedExpr>;
      $1.push($2);
      $$ = $1
    }
  | /* empty */ {
    || -> Vec<ParsedExpr>; 
    $$ = Vec::new()
  }
  ;
