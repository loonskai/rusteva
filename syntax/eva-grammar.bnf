// ----------------------------------------
// Lexical grammar (tokens)

%lex

%%

\s+                /* skip whitespace */ return "";
\"[^\"]*\"         return "STRING"
[\-]?\d+           return "NUMBER"
[\w\-+*=<>/]+      return "SYMBOL"

/lex

// ----------------------------------------
// Syntactic grammar (BNF)

%{
use common::ParsedExpr;
use std::{cell::RefCell, rc::Rc};

type TResult = Rc<RefCell<ParsedExpr>>;

%}

%%

Exp
  : Atom
  | List
  ;

Atom
  : NUMBER { 
    || -> Rc<RefCell<ParsedExpr>>;
    $$ = Rc::new(RefCell::new(ParsedExpr::Number(yytext.parse::<isize>().unwrap())))
  }
  | STRING {
    || -> Rc<RefCell<ParsedExpr>>;
    $$ = Rc::new(RefCell::new(ParsedExpr::String(yytext.to_string())))
  }
  | SYMBOL {
    || -> Rc<RefCell<ParsedExpr>>;
    $$ = Rc::new(RefCell::new(ParsedExpr::Symbol(yytext.to_string())))
  }
  ;

List
  : '(' ListEntries ')' {
    |$2: Vec<Rc<RefCell<ParsedExpr>>>| -> Rc<RefCell<ParsedExpr>>;
    $$ = Rc::new(RefCell::new(ParsedExpr::List($2)))
  }
  ;

ListEntries
  : ListEntries Exp {
    |$1: Vec<Rc<RefCell<ParsedExpr>>>, $2: Rc<RefCell<ParsedExpr>>| -> Vec<Rc<RefCell<ParsedExpr>>>;
      $1.push($2);
      $$ = $1
    }
  | /* empty */ {
    || -> Vec<Rc<RefCell<ParsedExpr>>>; 
    $$ = Vec::new()
  }
  ;
